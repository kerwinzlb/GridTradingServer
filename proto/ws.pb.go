// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ws.proto

package ws

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetOrderRequest struct {
	InstId               string   `protobuf:"bytes,1,opt,name=instId,proto3" json:"instId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderRequest) Reset()         { *m = GetOrderRequest{} }
func (m *GetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderRequest) ProtoMessage()    {}
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ff87931dac4ca82, []int{0}
}

func (m *GetOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderRequest.Unmarshal(m, b)
}
func (m *GetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderRequest.Marshal(b, m, deterministic)
}
func (m *GetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderRequest.Merge(m, src)
}
func (m *GetOrderRequest) XXX_Size() int {
	return xxx_messageInfo_GetOrderRequest.Size(m)
}
func (m *GetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderRequest proto.InternalMessageInfo

func (m *GetOrderRequest) GetInstId() string {
	if m != nil {
		return m.InstId
	}
	return ""
}

type GetOrderResponse struct {
	Replybody            []byte   `protobuf:"bytes,1,opt,name=replybody,proto3" json:"replybody,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderResponse) Reset()         { *m = GetOrderResponse{} }
func (m *GetOrderResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrderResponse) ProtoMessage()    {}
func (*GetOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ff87931dac4ca82, []int{1}
}

func (m *GetOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderResponse.Unmarshal(m, b)
}
func (m *GetOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderResponse.Marshal(b, m, deterministic)
}
func (m *GetOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderResponse.Merge(m, src)
}
func (m *GetOrderResponse) XXX_Size() int {
	return xxx_messageInfo_GetOrderResponse.Size(m)
}
func (m *GetOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderResponse proto.InternalMessageInfo

func (m *GetOrderResponse) GetReplybody() []byte {
	if m != nil {
		return m.Replybody
	}
	return nil
}

func init() {
	proto.RegisterType((*GetOrderRequest)(nil), "ws.GetOrderRequest")
	proto.RegisterType((*GetOrderResponse)(nil), "ws.GetOrderResponse")
}

func init() { proto.RegisterFile("ws.proto", fileDescriptor_7ff87931dac4ca82) }

var fileDescriptor_7ff87931dac4ca82 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x28, 0x2f, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x2f, 0x56, 0xd2, 0xe4, 0xe2, 0x77, 0x4f, 0x2d, 0xf1,
	0x2f, 0x4a, 0x49, 0x2d, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0xcb,
	0xcc, 0x2b, 0x2e, 0xf1, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x94, 0x0c,
	0xb8, 0x04, 0x10, 0x4a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x64, 0xb8, 0x38, 0x8b, 0x52,
	0x0b, 0x72, 0x2a, 0x93, 0xf2, 0x53, 0x2a, 0xc1, 0xca, 0x79, 0x82, 0x10, 0x02, 0x46, 0xce, 0x5c,
	0x4c, 0xe5, 0xc5, 0x42, 0xb6, 0x5c, 0x3c, 0x30, 0x7d, 0x9e, 0x79, 0x69, 0xf9, 0x42, 0xc2, 0x7a,
	0xe5, 0xc5, 0x7a, 0x68, 0x96, 0x4a, 0x89, 0xa0, 0x0a, 0x42, 0x8c, 0x57, 0x62, 0x30, 0x60, 0x4c,
	0x62, 0x03, 0x3b, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x8b, 0x42, 0x69, 0xb8, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WsClient is the client API for Ws service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WsClient interface {
	GetOrderInfo(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (Ws_GetOrderInfoClient, error)
}

type wsClient struct {
	cc *grpc.ClientConn
}

func NewWsClient(cc *grpc.ClientConn) WsClient {
	return &wsClient{cc}
}

func (c *wsClient) GetOrderInfo(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (Ws_GetOrderInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ws_serviceDesc.Streams[0], "/ws.ws/GetOrderInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &wsGetOrderInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ws_GetOrderInfoClient interface {
	Recv() (*GetOrderResponse, error)
	grpc.ClientStream
}

type wsGetOrderInfoClient struct {
	grpc.ClientStream
}

func (x *wsGetOrderInfoClient) Recv() (*GetOrderResponse, error) {
	m := new(GetOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WsServer is the server API for Ws service.
type WsServer interface {
	GetOrderInfo(*GetOrderRequest, Ws_GetOrderInfoServer) error
}

// UnimplementedWsServer can be embedded to have forward compatible implementations.
type UnimplementedWsServer struct {
}

func (*UnimplementedWsServer) GetOrderInfo(req *GetOrderRequest, srv Ws_GetOrderInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}

func RegisterWsServer(s *grpc.Server, srv WsServer) {
	s.RegisterService(&_Ws_serviceDesc, srv)
}

func _Ws_GetOrderInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WsServer).GetOrderInfo(m, &wsGetOrderInfoServer{stream})
}

type Ws_GetOrderInfoServer interface {
	Send(*GetOrderResponse) error
	grpc.ServerStream
}

type wsGetOrderInfoServer struct {
	grpc.ServerStream
}

func (x *wsGetOrderInfoServer) Send(m *GetOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Ws_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ws.ws",
	HandlerType: (*WsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderInfo",
			Handler:       _Ws_GetOrderInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ws.proto",
}
